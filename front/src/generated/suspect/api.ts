// tslint:disable
/**
 * suspect the origin of the slow codepath
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|"
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected fetch: FetchAPI = portableFetch
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface Code
 */
export interface Code {
  /**
   *
   * @type {string}
   * @memberof Code
   */
  snippet?: string;
  /**
   *
   * @type {string}
   * @memberof Code
   */
  link?: string;
  /**
   *
   * @type {boolean}
   * @memberof Code
   */
  highlight?: boolean;
}

/**
 *
 * @export
 * @interface Report
 */
export interface Report {
  /**
   *
   * @type {string}
   * @memberof Report
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Report
   */
  searchUrl?: string;
  /**
   *
   * @type {number}
   * @memberof Report
   */
  lineStartAt?: number;
  /**
   *
   * @type {number}
   * @memberof Report
   */
  totalRatio?: number;
  /**
   *
   * @type {number}
   * @memberof Report
   */
  immidiateRatio?: number;
  /**
   *
   * @type {string}
   * @memberof Report
   */
  label?: string;
  /**
   *
   * @type {Array&lt;Code&gt;}
   * @memberof Report
   */
  code?: Array<Code>;
  /**
   *
   * @type {Array&lt;Report&gt;}
   * @memberof Report
   */
  children?: Array<Report>;
}

/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} uuid the uuid of the snapshot
     * @param {number} start
     * @param {number} end
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsUuidGet(
      uuid: string,
      start: number,
      end: number,
      options: any = {}
    ): FetchArgs {
      // verify required parameter 'uuid' is not null or undefined
      if (uuid === null || uuid === undefined) {
        throw new RequiredError(
          "uuid",
          "Required parameter uuid was null or undefined when calling reportsUuidGet."
        );
      }
      // verify required parameter 'start' is not null or undefined
      if (start === null || start === undefined) {
        throw new RequiredError(
          "start",
          "Required parameter start was null or undefined when calling reportsUuidGet."
        );
      }
      // verify required parameter 'end' is not null or undefined
      if (end === null || end === undefined) {
        throw new RequiredError(
          "end",
          "Required parameter end was null or undefined when calling reportsUuidGet."
        );
      }
      const localVarPath = `/reports/{uuid}`.replace(
        `{${"uuid"}}`,
        encodeURIComponent(String(uuid))
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (start !== undefined) {
        localVarQueryParameter["start"] = start;
      }

      if (end !== undefined) {
        localVarQueryParameter["end"] = end;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign(
        {},
        localVarHeaderParameter,
        options.headers
      );

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} uuid the uuid of the snapshot
     * @param {number} start
     * @param {number} end
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsUuidGet(
      uuid: string,
      start: number,
      end: number,
      options?: any
    ): (fetch?: FetchAPI, basePath?: string) => Promise<Report> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(
        configuration
      ).reportsUuidGet(uuid, start, end, options);
      return (
        fetch: FetchAPI = portableFetch,
        basePath: string = BASE_PATH
      ) => {
        return fetch(
          basePath + localVarFetchArgs.url,
          localVarFetchArgs.options
        ).then(response => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    }
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function(
  configuration?: Configuration,
  fetch?: FetchAPI,
  basePath?: string
) {
  return {
    /**
     *
     * @param {string} uuid the uuid of the snapshot
     * @param {number} start
     * @param {number} end
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportsUuidGet(uuid: string, start: number, end: number, options?: any) {
      return DefaultApiFp(configuration).reportsUuidGet(
        uuid,
        start,
        end,
        options
      )(fetch, basePath);
    }
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {} uuid the uuid of the snapshot
   * @param {} start
   * @param {} end
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public reportsUuidGet(
    uuid: string,
    start: number,
    end: number,
    options?: any
  ) {
    return DefaultApiFp(this.configuration).reportsUuidGet(
      uuid,
      start,
      end,
      options
    )(this.fetch, this.basePath);
  }
}
