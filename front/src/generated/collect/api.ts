/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * collective server for performance inspection
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface App
 */
export interface App {
    /**
     * 
     * @type {number}
     * @memberof App
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof App
     */
    name: string;
    /**
     * 
     * @type {Array&lt;Environment&gt;}
     * @memberof App
     */
    environments?: Array<Environment>;
    /**
     * 
     * @type {Date}
     * @memberof App
     */
    lastseen?: Date;
}

/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * 
     * @type {Date}
     * @memberof Config
     */
    date: Date;
    /**
     * 
     * @type {Array&lt;EnvironmentConfig&gt;}
     * @memberof Config
     */
    environmentConfig?: Array<EnvironmentConfig>;
}

/**
 * 
 * @export
 * @interface Environment
 */
export interface Environment {
    /**
     * 
     * @type {number}
     * @memberof Environment
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Environment
     */
    name: string;
    /**
     * 
     * @type {Array&lt;Pod&gt;}
     * @memberof Environment
     */
    pods?: Array<Pod>;
    /**
     * 
     * @type {number}
     * @memberof Environment
     */
    liveCount?: number;
}

/**
 * 
 * @export
 * @interface EnvironmentConfig
 */
export interface EnvironmentConfig {
    /**
     * 
     * @type {string}
     * @memberof EnvironmentConfig
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentConfig
     */
    tenant?: string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentConfig
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentConfig
     */
    landscape?: string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentConfig
     */
    mischoUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentConfig
     */
    serviceUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EnvironmentConfig
     */
    isMultitenant?: boolean;
}

/**
 * 
 * @export
 * @interface Error
 */
export interface Error {
    /**
     * 
     * @type {string}
     * @memberof Error
     */
    message: string;
}

/**
 * 
 * @export
 * @interface Pod
 */
export interface Pod {
    /**
     * 
     * @type {number}
     * @memberof Pod
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Pod
     */
    name: string;
    /**
     * 
     * @type {Array&lt;SnapshotSummary&gt;}
     * @memberof Pod
     */
    snapshots?: Array<SnapshotSummary>;
    /**
     * 
     * @type {boolean}
     * @memberof Pod
     */
    isLive?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Pod
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Pod
     */
    app?: string;
    /**
     * 
     * @type {string}
     * @memberof Pod
     */
    environment?: string;
}

/**
 * 
 * @export
 * @interface ReplicasRequest
 */
export interface ReplicasRequest {
    /**
     * 
     * @type {number}
     * @memberof ReplicasRequest
     */
    count: number;
}

/**
 * 
 * @export
 * @interface Snapshot
 */
export interface Snapshot {
    /**
     * 
     * @type {string}
     * @memberof Snapshot
     */
    uuid: string;
    /**
     * 
     * @type {Date}
     * @memberof Snapshot
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Snapshot
     */
    pod?: string;
    /**
     * 
     * @type {string}
     * @memberof Snapshot
     */
    environment?: string;
    /**
     * 
     * @type {string}
     * @memberof Snapshot
     */
    flamescopeLink?: string;
}

/**
 * 
 * @export
 * @interface SnapshotSummary
 */
export interface SnapshotSummary {
    /**
     * 
     * @type {string}
     * @memberof SnapshotSummary
     */
    uuid: string;
    /**
     * 
     * @type {Date}
     * @memberof SnapshotSummary
     */
    createdAt?: Date;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {ReplicasRequest} [replicas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsAppidEnvironmentsEnvironmentPatch(appid: string, environment: string, replicas?: ReplicasRequest, options: any = {}): FetchArgs {
            // verify required parameter 'appid' is not null or undefined
            if (appid === null || appid === undefined) {
                throw new RequiredError('appid','Required parameter appid was null or undefined when calling appsAppidEnvironmentsEnvironmentPatch.');
            }
            // verify required parameter 'environment' is not null or undefined
            if (environment === null || environment === undefined) {
                throw new RequiredError('environment','Required parameter environment was null or undefined when calling appsAppidEnvironmentsEnvironmentPatch.');
            }
            const localVarPath = `/apps/{appid}/environments/{environment}`
                .replace(`{${"appid"}}`, encodeURIComponent(String(appid)))
                .replace(`{${"environment"}}`, encodeURIComponent(String(environment)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReplicasRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(replicas || {}) : (replicas || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeApp(appid: string, options: any = {}): FetchArgs {
            // verify required parameter 'appid' is not null or undefined
            if (appid === null || appid === undefined) {
                throw new RequiredError('appid','Required parameter appid was null or undefined when calling describeApp.');
            }
            const localVarPath = `/apps/{appid}`
                .replace(`{${"appid"}}`, encodeURIComponent(String(appid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeEnvironment(appid: string, environment: string, options: any = {}): FetchArgs {
            // verify required parameter 'appid' is not null or undefined
            if (appid === null || appid === undefined) {
                throw new RequiredError('appid','Required parameter appid was null or undefined when calling describeEnvironment.');
            }
            // verify required parameter 'environment' is not null or undefined
            if (environment === null || environment === undefined) {
                throw new RequiredError('environment','Required parameter environment was null or undefined when calling describeEnvironment.');
            }
            const localVarPath = `/apps/{appid}/environments/{environment}`
                .replace(`{${"appid"}}`, encodeURIComponent(String(appid)))
                .replace(`{${"environment"}}`, encodeURIComponent(String(environment)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {string} pod 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePod(appid: string, environment: string, pod: string, options: any = {}): FetchArgs {
            // verify required parameter 'appid' is not null or undefined
            if (appid === null || appid === undefined) {
                throw new RequiredError('appid','Required parameter appid was null or undefined when calling describePod.');
            }
            // verify required parameter 'environment' is not null or undefined
            if (environment === null || environment === undefined) {
                throw new RequiredError('environment','Required parameter environment was null or undefined when calling describePod.');
            }
            // verify required parameter 'pod' is not null or undefined
            if (pod === null || pod === undefined) {
                throw new RequiredError('pod','Required parameter pod was null or undefined when calling describePod.');
            }
            const localVarPath = `/apps/{appid}/environments/{environment}/pods/{pod}`
                .replace(`{${"appid"}}`, encodeURIComponent(String(appid)))
                .replace(`{${"environment"}}`, encodeURIComponent(String(environment)))
                .replace(`{${"pod"}}`, encodeURIComponent(String(pod)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApps(options: any = {}): FetchArgs {
            const localVarPath = `/apps`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigs(options: any = {}): FetchArgs {
            const localVarPath = `/config`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} environment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentConfig(environment: string, options: any = {}): FetchArgs {
            // verify required parameter 'environment' is not null or undefined
            if (environment === null || environment === undefined) {
                throw new RequiredError('environment','Required parameter environment was null or undefined when calling getEnvironmentConfig.');
            }
            const localVarPath = `/config/environment/{environment}`
                .replace(`{${"environment"}}`, encodeURIComponent(String(environment)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironments(appid: string, options: any = {}): FetchArgs {
            // verify required parameter 'appid' is not null or undefined
            if (appid === null || appid === undefined) {
                throw new RequiredError('appid','Required parameter appid was null or undefined when calling getEnvironments.');
            }
            const localVarPath = `/apps/{appid}/environments`
                .replace(`{${"appid"}}`, encodeURIComponent(String(appid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPods(appid: string, environment: string, options: any = {}): FetchArgs {
            // verify required parameter 'appid' is not null or undefined
            if (appid === null || appid === undefined) {
                throw new RequiredError('appid','Required parameter appid was null or undefined when calling getPods.');
            }
            // verify required parameter 'environment' is not null or undefined
            if (environment === null || environment === undefined) {
                throw new RequiredError('environment','Required parameter environment was null or undefined when calling getPods.');
            }
            const localVarPath = `/apps/{appid}/environments/{environment}/pods`
                .replace(`{${"appid"}}`, encodeURIComponent(String(appid)))
                .replace(`{${"environment"}}`, encodeURIComponent(String(environment)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthz(options: any = {}): FetchArgs {
            const localVarPath = `/healthz`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailablePods(options: any = {}): FetchArgs {
            const localVarPath = `/available-pods`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {string} pod 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newSnapshot(appid: string, environment: string, pod: string, options: any = {}): FetchArgs {
            // verify required parameter 'appid' is not null or undefined
            if (appid === null || appid === undefined) {
                throw new RequiredError('appid','Required parameter appid was null or undefined when calling newSnapshot.');
            }
            // verify required parameter 'environment' is not null or undefined
            if (environment === null || environment === undefined) {
                throw new RequiredError('environment','Required parameter environment was null or undefined when calling newSnapshot.');
            }
            // verify required parameter 'pod' is not null or undefined
            if (pod === null || pod === undefined) {
                throw new RequiredError('pod','Required parameter pod was null or undefined when calling newSnapshot.');
            }
            const localVarPath = `/apps/{appid}/environments/{environment}/pods/{pod}/snapshots`
                .replace(`{${"appid"}}`, encodeURIComponent(String(appid)))
                .replace(`{${"environment"}}`, encodeURIComponent(String(environment)))
                .replace(`{${"pod"}}`, encodeURIComponent(String(pod)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {ReplicasRequest} [replicas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsAppidEnvironmentsEnvironmentPatch(appid: string, environment: string, replicas?: ReplicasRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Environment> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).appsAppidEnvironmentsEnvironmentPatch(appid, environment, replicas, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} appid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeApp(appid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<App> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).describeApp(appid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeEnvironment(appid: string, environment: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Environment> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).describeEnvironment(appid, environment, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {string} pod 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePod(appid: string, environment: string, pod: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Pod> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).describePod(appid, environment, pod, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApps(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getApps(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigs(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Config> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getConfigs(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} environment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentConfig(environment: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EnvironmentConfig> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getEnvironmentConfig(environment, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} appid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironments(appid: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Environment>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getEnvironments(appid, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPods(appid: string, environment: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Pod>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getPods(appid, environment, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthz(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).healthz(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailablePods(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Pod>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).listAvailablePods(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {string} pod 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newSnapshot(appid: string, environment: string, pod: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Snapshot> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).newSnapshot(appid, environment, pod, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {ReplicasRequest} [replicas] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsAppidEnvironmentsEnvironmentPatch(appid: string, environment: string, replicas?: ReplicasRequest, options?: any) {
            return DefaultApiFp(configuration).appsAppidEnvironmentsEnvironmentPatch(appid, environment, replicas, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} appid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeApp(appid: string, options?: any) {
            return DefaultApiFp(configuration).describeApp(appid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeEnvironment(appid: string, environment: string, options?: any) {
            return DefaultApiFp(configuration).describeEnvironment(appid, environment, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {string} pod 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describePod(appid: string, environment: string, pod: string, options?: any) {
            return DefaultApiFp(configuration).describePod(appid, environment, pod, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApps(options?: any) {
            return DefaultApiFp(configuration).getApps(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigs(options?: any) {
            return DefaultApiFp(configuration).getConfigs(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} environment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentConfig(environment: string, options?: any) {
            return DefaultApiFp(configuration).getEnvironmentConfig(environment, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} appid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironments(appid: string, options?: any) {
            return DefaultApiFp(configuration).getEnvironments(appid, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPods(appid: string, environment: string, options?: any) {
            return DefaultApiFp(configuration).getPods(appid, environment, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthz(options?: any) {
            return DefaultApiFp(configuration).healthz(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailablePods(options?: any) {
            return DefaultApiFp(configuration).listAvailablePods(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} appid 
         * @param {string} environment 
         * @param {string} pod 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newSnapshot(appid: string, environment: string, pod: string, options?: any) {
            return DefaultApiFp(configuration).newSnapshot(appid, environment, pod, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {} appid 
     * @param {} environment 
     * @param {} [replicas] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appsAppidEnvironmentsEnvironmentPatch(appid: string, environment: string, replicas?: ReplicasRequest, options?: any) {
        return DefaultApiFp(this.configuration).appsAppidEnvironmentsEnvironmentPatch(appid, environment, replicas, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} appid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeApp(appid: string, options?: any) {
        return DefaultApiFp(this.configuration).describeApp(appid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} appid 
     * @param {} environment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describeEnvironment(appid: string, environment: string, options?: any) {
        return DefaultApiFp(this.configuration).describeEnvironment(appid, environment, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} appid 
     * @param {} environment 
     * @param {} pod 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public describePod(appid: string, environment: string, pod: string, options?: any) {
        return DefaultApiFp(this.configuration).describePod(appid, environment, pod, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApps(options?: any) {
        return DefaultApiFp(this.configuration).getApps(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getConfigs(options?: any) {
        return DefaultApiFp(this.configuration).getConfigs(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} environment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEnvironmentConfig(environment: string, options?: any) {
        return DefaultApiFp(this.configuration).getEnvironmentConfig(environment, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} appid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEnvironments(appid: string, options?: any) {
        return DefaultApiFp(this.configuration).getEnvironments(appid, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} appid 
     * @param {} environment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPods(appid: string, environment: string, options?: any) {
        return DefaultApiFp(this.configuration).getPods(appid, environment, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthz(options?: any) {
        return DefaultApiFp(this.configuration).healthz(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAvailablePods(options?: any) {
        return DefaultApiFp(this.configuration).listAvailablePods(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} appid 
     * @param {} environment 
     * @param {} pod 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public newSnapshot(appid: string, environment: string, pod: string, options?: any) {
        return DefaultApiFp(this.configuration).newSnapshot(appid, environment, pod, options)(this.fetch, this.basePath);
    }

}

