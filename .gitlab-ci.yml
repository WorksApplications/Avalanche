stages:
    - build
    - predeploy
    - deploy

backend-build:
    except:
        - develop/front
    stage: build
    image: golang:1.11
    script:
        - tar xf cache-go.tar.gz -C / || true
        - mkdir -p /go/src/git.paas.workslan/resource_optimization
        - ln -s ${CI_PROJECT_DIR} /go/src/git.paas.workslan/resource_optimization/dynamic_analysis
        - cd /go/src/git.paas.workslan/resource_optimization/dynamic_analysis
        - curl -sS https://github.com/go-swagger/go-swagger/releases/download/0.15.0/swagger_linux_amd64 -L > /go/bin/swagger
        - chmod +x /go/bin/swagger
        - swagger generate server -f api/collect.yml -t generated_files -A collect
        - make dep
        - make backend
        - tar czf cache-go.tar.gz $GOPATH/src/github.com $GOPATH/src/golang.org $GOPATH/src/gopkg.in || true
    cache:
        key: golang
        paths:
            - cache-go.tar.gz
    artifacts:
        paths:
            - bin/collect
            - bin/detect
            - bin/enroll
        expire_in: 1 hour

front-build:
    except:
        - develop/backend
    stage: build
    image: node:10.8.0
    script:
        - cd front
        - yarn add --dev webpack webpack-cli
        - npm install
        - PATH=$PATH:$(pwd)/node_modules/.bin yarn build
    cache:
        key: react
        paths:
            - front/node_modules
    artifacts:
        paths:
            - front/public/
        expire_in: 1 hour

push-images:
    only:
        - master
    stage: predeploy
    image: docker:stable
    script:
        - apk add git
        - docker info
        - docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${DOCKERHOST}
        - export GIT_HASH=$(git show --quiet --format=%ha)
        - ls -lR
        - apk add make
        - touch bin/collect bin/detect
        - docker build -f image/collect/Dockerfile --tag ${
        - docker build -f image/detect/Dockerfile  --tag ${
        - docker build -f image/enroll/Dockerfile  --tag ${

        - docker build -f image/static/Dockerfile  --tag ${
        - docker push ${
        - docker push ${
        - docker push ${
        - docker push ${
        - docker push ${
    variables:
        DOCKERHOST: ""
        

generate-kubefile:
    only:
        - master
    stage: predeploy
    image: alpine:latest
    script:
        - apk add git
        - export GIT_HASH=$(git show --quiet --format=%ha)
        - wget -O /usr/local/bin/kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64 && chmod +x /usr/local/bin/kustomize
        - apk add gettext
        - envsubst < deployment/kustomize/template/imageTags.yaml >> deployment/kustomize/base/kustomization.yaml
        - kustomize build deployment/kustomize/overlays/production > production.yaml
        - kustomize build deployment/kustomize/overlays/devel > devel.yaml
    artifacts:
        paths:
            - production.yaml
            - devel.yaml
        expire_in: 7 day
    variables:
        KUSTOMIZE_VERSION: "1.0.10"

deploy-develop:
    only:
        - master
    stage: deploy
    image: roffe/kubectl:v1.11.2
    script:
        - echo ${KUBECTL_CONFIG} | envsubst > .kube/config
        - kubectl apply -f devel.yaml
    variables:
        KUBECTL_CONFIG: |
            apiVersion: v1
            contexts:
            - context:
                cluster: kubernetes
                user: kubernetes-admin
              name: cluster
            current-context: cluster
            clusters:
            - cluster:
                certificate-authority-data: ${KUBE__CLUSTER_CERT}
                server: ${KUBE_SERVER}
              name: kubernetes
            kind: Config
            users:
            - name: kubernetes-admin
              user:
                client-certificate-data: ${KUBE_CLIENT_CERT}
                client-key-data: ${KUBE_CLIENT_KEY}

deploy-production:
    only:
        - master
    when: manual
    stage: deploy
    image: roffe/kubectl:v1.11.2
    script:
        - echo ${KUBECTL_CONFIG} | envsubst > .kube/config
        - kubectl apply -f production.yaml
    variables:
        KUBECTL_CONFIG: |
            apiVersion: v1
            contexts:
            - context:
                cluster: kubernetes
                user: kubernetes-admin
              name: cluster
            current-context: cluster
            clusters:
            - cluster:
                certificate-authority-data: ${KUBE__CLUSTER_CERT}
                server: ${KUBE_SERVER}
              name: kubernetes
            kind: Config
            users:
            - name: kubernetes-admin
              user:
                client-certificate-data: ${KUBE_CLIENT_CERT}
                client-key-data: ${KUBE_CLIENT_KEY}

