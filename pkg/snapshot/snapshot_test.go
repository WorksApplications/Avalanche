/*
 * Copyright (c) 2018 Works Applications Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package snapshot

import (
	"github.com/DATA-DOG/go-sqlmock"
	"github.com/WorksApplications/Avalanche/generated_files/models"
	"reflect"
	//"github.com/google/uuid"
	"encoding/json"
	"testing"
	"time"
)

func TestGetLatest(t *testing.T) {
	epoch1 := time.Date(2018, 1, 15, 3, 0, 0, 0, time.UTC)
	epoch2 := time.Date(2018, 3, 25, 5, 0, 0, 0, time.UTC)
	db, mock, _ := sqlmock.New()
	//InitTable(db)

	snapshots := sqlmock.NewRows([]string{"uuid", "created", "appid", "podid", "envid", "layid", "pvloc"})
	snapshots.AddRow(2, "fa27ec29-71f5-46c1-9644-49be4e5b66ee", 1, 1, 1, epoch1, "")
	snapshots.AddRow(2, "3c00c091-f42e-4b8c-a1f8-b618c652723a", 1, 1, 1, epoch2, "")

	mock.ExpectQuery("SELECT (.+) FROM snapshot order by created desc limit 10").WillReturnRows(snapshots)

	snapshotsResult := GetLatest(db, 10)
	if snapshotsResult[0].created.Before(snapshotsResult[1].created) {
		t.Fatal("Return oldest one first")
	}
}

func TestToResponse(t *testing.T) {
	epoch := time.Date(2018, 1, 15, 3, 0, 0, 0, time.UTC)
	db, mock, _ := sqlmock.New()
	//InitTable(db)

	pod := sqlmock.NewRows([]string{"id", "name", "appid", "envid", "layid", "created"}).AddRow(1, "collabo-bd6dc859c-f7dfm", 1, 2, 2, epoch)
	environ := sqlmock.NewRows([]string{"id", "name"}).AddRow(2, "systema")

	mock.ExpectQuery("SELECT (.+) FROM pod WHERE id = \"1\"").WillReturnRows(pod)
	mock.ExpectQuery("SELECT (.+) FROM environ WHERE id = \"2\"").WillReturnRows(environ)

	id := "d7eec7c1-daf5-4198-9503-6957aea0bf90"
	internal := SnapshotInternal{
		uuid:    id,
		appid:   1,
		podid:   1,
		envid:   2,
		layid:   2,
		link:    "collabo-bd6dc859c-f7dfm/a0/d7eec7c1-daf5-4198-9503-6957aea0bf90",
		created: epoch,
	}
	resp := internal.ToResponse(db, "http://flamescope.internal.worksap.com/#/heatmap/")
	/* This example is generated by an example in the API definitions */
	example := []byte(`{
        "createdAt": "2018-01-15T03:00:00.000Z",
        "environment": "systema",
        "flamescopeLink": "http://flamescope.internal.worksap.com/#/heatmap/collabo-bd6dc859c-f7dfm%2Fa0%2Fd7eec7c1-daf5-4198-9503-6957aea0bf90",
        "pod": "collabo-bd6dc859c-f7dfm",
        "uuid": "d7eec7c1-daf5-4198-9503-6957aea0bf90"
      }`)

	var expect models.Snapshot
	json.Unmarshal(example, &expect)
	if !reflect.DeepEqual(&expect, resp) {
		json, err := json.Marshal(resp)
		if err != nil {
			t.Fatal("Return object is not serializable")
		}

		t.Fatal("Got:", string(json), "Expected:", string(example), "\n", "Got:", resp, "Expected:", &expect)
	}
}
